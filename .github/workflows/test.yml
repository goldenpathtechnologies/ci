name: Test and version

on:
  push:
    branches:
      - "**"
    paths-ignore:
      - CHANGELOG.md
      - README.md
      - LICENSE
      - CODE_OF_CONDUCT.md
      - .gitattributes
      - .gitignore
    tags-ignore:
      - "**"
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - edited
    branches:
      - "**"
    paths-ignore:
      - CHANGELOG.md
      - README.md
      - LICENSE
      - CODE_OF_CONDUCT.md
      - .gitattributes
      - .gitignore
    tags-ignore:
      - "**"

env:
  GO_VERSION: 1.17

jobs:
  test-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Set up gotestfmt
        run: go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest

      - name: Run tests
        run: |
          set -euo pipefail
          go test -json -v ./... 2>&1 | tee /tmp/gotest.log | gotestfmt

      - name: Upload test log
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-log-linux
          path: /tmp/gotest.log
          if-no-files-found: error

  test-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Set up gotestfmt
        run: go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest

      - name: Store gotest.log path in env
        run: Write-Output "GOTESTLOG_PATH=$env:TEMP/gotest.log" >> $env:GITHUB_ENV

      - name: Run tests
        run: |
          Set-StrictMode -Version 3.0
          go test -json -v ./... 2>&1 | Tee-Object -Filepath ${{env.GOTESTLOG_PATH}} | gotestfmt

      - name: Upload test log
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-log-windows
          path: ${{env.GOTESTLOG_PATH}}
          if-no-files-found: error

  coverage:
    runs-on: ubuntu-latest
    needs:
      - test-linux
      - test-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Run coverage
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Validate Codecov configuration
        run: cat codecov.yml | curl --data-binary @- https://codecov.io/validate

      - name: Download and check integrity of Codecov uploader script
        run: |
          curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
          curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
          gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
          shasum -a 256 -c codecov.SHA256SUM

      # TODO: Remove Codecov token parameter when repo is public, it is required while it is private.
      - name: Upload coverage to Codecov
        run: |
          chmod +x codecov
          ./codecov -t ${{secrets.CODECOV_TOKEN}}

  # TODO: Consider adding a security and license scanning job to this workflow. Explore several options, but start here:
  #  https://github.com/marketplace/actions/security-and-licence-scan

  version:
    runs-on: ubuntu-latest
    needs:
      - coverage
    if: ${{ github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'dev') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{secrets.GH_TOKEN}}
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 'lts/*'
      - name: Generate semantic-release configuration
        run: |
          cat << EOF > .releaserc
          {
            "branches": [
              "main",
              {
                "name": "dev",
                "prerelease": true
              }
            ],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              "@semantic-release/git"
            ],
            "preset": "conventionalcommits",
            "parserOpts": {
              "noteKeywords": ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING"]
            },
            "writerOpts": {
              "commitsSort": ["subject", "scope"]
            },
            "message": "chore(release): \${nextRelease.version}\\n\\n\${nextRelease.notes}"
          }
          EOF
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
        run: |
          npx \
          -p @semantic-release/git \
          -p @semantic-release/commit-analyzer \
          -p @semantic-release/release-notes-generator \
          -p @semantic-release/changelog \
          -p conventional-changelog-conventionalcommits \
          semantic-release
