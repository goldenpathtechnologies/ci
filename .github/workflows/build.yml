name: Build

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-[a-zA-Z]+.[0-9]+"

env:
  # TODO: Put BUILD_OWNER and APP_NAME in secrets.
  BUILD_OWNER: "Golden Path Technologies Inc."
  APP_NAME: ci
  GO_VERSION: 1.17
  RELEASE_ARTIFACT_NAME: artifact

jobs:
  # TODO: Consider adding a security and license scanning job to the build. Explore several options, but start here:
  #  https://github.com/marketplace/actions/security-and-licence-scan

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{secrets.GH_TOKEN}}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Get build date (RFC3339 format)
        run: echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV

      - name: Get build version
        run: echo "BUILD_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV

      - name: Build
        run: |
          go build -gcflags="all=-N -l" -ldflags \
          "-X 'main.BuildVersion=${{env.BUILD_VERSION}}' -X 'main.BuildDate=${{env.BUILD_DATE}}' -X 'main.BuildOwner=${{env.BUILD_OWNER}}'" \
          -tags forceposix \
          -o ./build/${{env.APP_NAME}}/bin/${{env.APP_NAME}}

      - name: Verify built executable
        run: ./build/${{env.APP_NAME}}/bin/${{env.APP_NAME}} -v

      - name: Copy files to build artifact package
        run: cp ./{${{env.APP_NAME}}.sh,install.sh,uninstall.sh} ./build/${{env.APP_NAME}}/

      - name: Create build artifact package tarball
        run: tar -czvf ./build/${{env.APP_NAME}}_linux-v${{env.BUILD_VERSION}}.tar.gz ./build/${{env.APP_NAME}}

      - name: Upload build artifact package
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.RELEASE_ARTIFACT_NAME}}
          path: ./build/${{env.APP_NAME}}_linux-v${{env.BUILD_VERSION}}.tar.gz

#      - name: Test
#        run: go test -v ./...

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{secrets.GH_TOKEN}}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Get build date (RFC3339 format)
        run: Write-Output "BUILD_DATE=$($(Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ'))" >> $env:GITHUB_ENV

      - name: Get build version
        run: Write-Output "BUILD_VERSION=$($env:GITHUB_REF -replace 'refs/tags/' -replace 'v(.*)', '$1')" >> $env:GITHUB_ENV

      - name: Build
        run: |
          go build -gcflags="all=-N -l" -ldflags `
          "-X 'main.BuildVersion=${{env.BUILD_VERSION}}' -X 'main.BuildDate=${{env.BUILD_DATE}}' -X 'main.BuildOwner=${{env.BUILD_OWNER}}'" `
          -tags forceposix `
          -o ./build/${{env.APP_NAME}}/bin/${{env.APP_NAME}}.exe

      - name: Verify built executable
        run: ./build/${{env.APP_NAME}}/bin/${{env.APP_NAME}}.exe -v

      - name: Update version in PowerShell module manifest file
        run: (Get-Content ./${{env.APP_NAME}}.psd1) -replace 'ModuleVersion = ''0.0.0''','ModuleVersion = ''${{env.BUILD_VERSION}}''' | Set-Content ./${{env.APP_NAME}}.psd1

      - name: Import code signing certificate
        run: |
          $pfxCertFilePath = Join-Path -Path $PSScriptRoot -ChildPath "CodeSigningCertificate.pfx"
          Set-Content -Value $([System.Convert]::FromBase64String($env:BASE64_PFX)) -Path $pfxCertFilePath -Encoding Byte
          Import-PfxCertificate -FilePath $pfxCertFilePath -Password $($env:PFX_PASSWORD | ConvertTo-SecureString -AsPlainText -Force) -CertStoreLocation Cert:/CurrentUser/My
        env:
          BASE64_PFX: ${{secrets.BASE64_PFX}}
          PFX_PASSWORD: ${{secrets.PFX_PASSWORD}}

      - name: Digitally sign PowerShell scripts and module files
        run: |
          $codeSigningCert = Get-ChildItem Cert:/CurrentUser/My -CodeSigningCert | Select-Object -First 1
          $psFiles = Get-ChildItem -Path . -Exclude .git,.github,.idea,bin,build -Filter "*.ps*" -Recurse -ErrorAction Stop
          $psFiles | ForEach-Object {
            $script = Get-Content -Path $_.FullName
            Write-Output "Signing '$($_.Name)' with certificate '$($codeSigningCert.Thumbprint)'"
            $null = Set-AuthenticodeSignature -Certificate $codeSigningCert -FilePath $script.FullName -TimestampServer "http://timestamp.digicert.com/"
          }

      - name: Copy files to release package
        run: Copy-Item ./${{env.APP_NAME}}.psm1,./${{env.APP_NAME}}.psd1,./install.ps1,./uninstall.ps1 -Destination ./build/${{env.APP_NAME}}/

      - name: Create relase package zip file
        run: Get-ChildItem -Path ./build/${{env.APP_NAME}}/ | Compress-Archive -DestinationPath ./build/${{env.APP_NAME}}_windows-v${{env.BUILD_VERSION}}.zip

      - name: Upload release package
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.RELEASE_ARTIFACT_NAME}}
          path: ./build/${{env.APP_NAME}}_windows-v${{env.BUILD_VERSION}}.zip

#      - name: Test
#        run: go test -v ./...

  release:
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{secrets.GH_TOKEN}}
      - name: Determine release type
        run: echo "IS_PRERELEASE=$(if [ "$(echo $GITHUB_REF | sed -r 's/refs\/[a-zA-Z]+\/v[0-9]+\.[0-9]+\.[0-9]+//')" ]; then echo true; else echo false; fi)" >> $GITHUB_ENV
      - name: Download release package
        uses: actions/download-artifact@v2
        with:
          name: ${{env.RELEASE_ARTIFACT_NAME}}
          path: ./bin
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          token: ${{ secrets.GH_TOKEN }}
          prerelease: ${{env.IS_PRERELEASE == 'true'}}
          files: |
            ./bin/*
